# Create component

# https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#plain-javascript-classes
rcc:
  description: Create a React ES6 class
  tpl: |
    import React, { Component, PropTypes } from 'react';

    class $COMPONENT$ extends Component {
      render() {
        return (
          <div>$END$</div>
        )
      }
    }

    $COMPONENT$.propTypes = {}
    $COMPONENT$.defaultProps = {}

    export default $COMPONENT$

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}

# Pure function component
# @see https://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d#.qxyk0j6nc
# @see https://facebook.github.io/react/docs/reusable-components.html#stateless-functions
# @see https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components
rpfc:
  description: Create a pure function component
  tpl: |
      import React, { PropTypes } from 'react'

      const $COMPONENT$ = ($PARAMETER$) => {
        return (
          <div>$END$</div>
        )
      }

      $COMPONENT$.propTypes = {}
      $COMPONENT$.defaultProps = {}

      export default $COMPONENT$

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}
    - {name: 'PARAMETER', defaultValue: '&quot;props&quot;'}

# Import react-dom
rdom:
  description: import ReactDOM
  tpl: |
      import ReactDOM from 'react-dom';
      $END$

# cdm
cdm:
  description: componentDidMount
  tpl: |
    componentDidMount() {
      $END$
    }

# cdu
cdu:
  description: componentDidUpdate
  tpl: |
    componentDidUpdate(prevProps, prevState) {
      $END$
    }

# cwm
cwm:
  description: componentWillMount
  tpl: |
    componentWillMount() {
      $END$
    }

# cwr
cwr:
  description: componentWillReceiveProps
  tpl: |
    componentWillReceiveProps(nextProps, nextContext) {
      $END$
    }

#cwu
cwu:
  description: componentWillUpdate
  tpl: |
    componentWillUpdate(nextProps, nextState) {
      $END$
    }

#cwum
cwum:
  description: componentWillUnmount
  tpl: |
    componentWillUnmount() {
      $END$
    }

#
props:
  tpl: this.props

# set inner HTML
dsih:
  description: dangerouslySetInnerHTML
  tpl: "dangerouslySetInnerHTML={{__html: '$END$'}}"

# PropType
pt:
  description: PropTypes.
  tpl: "$START$: PropTypes.$END$,"
  variables:
    - {name: 'START'}

# render
ren:
  description: render()
  tpl: |
    render() {
      return (
        <div>$END$</div>
      )
    }

# shouldComponentUpdate
scu:
  description: shouldComponentUpdate
  tpl: |
    shouldComponentUpdate(nextProps, nextState) {
      $END$
    }

# sst
sst:
  description: this.setState
  tpl: |
    this.setState({ $START$: $END$ })
  variables:
    - {name: 'START'}

# constructor
cstt:
  description: constructor(props)
  tpl: |
    constructor(props) {
      super(props)
      $END$
    }

  variables:
    - {name: 'START'}

# transition add-on
tsn:
  description: transitionName
  tpl: transitionName="$END$"

tsa:
  description: transitionAppear
  tpl: transitionAppear={$END$}

tse:
  description: transitionEnter
  tpl: transitionEnter={$END$}

tsl:
  description: transitionLeave
  tpl: transitionLeave={$END$}

tset:
  description: transitionEnterTimeout
  tpl: transitionEnterTimeout={$END$}

tslt:
  description: transitionLeaveTimeout
  tpl: transitionLeaveTimeout={$END$}

tsat:
  description: transitionAppearTimeout
  tpl: transitionAppearTimeout={$END$}
